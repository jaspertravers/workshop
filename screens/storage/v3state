[{"spec":{"top":0,"left":0,"width":1920,"height":1080},"children":[{"spec":{"top":-3576,"left":-1032,"width":505,"height":97},"children":[],"node":null,"type":"codemirror","view":null,"content":"nam// clear canvas\nlet c = canvas.view.canvas;\nlet ctx = canvas.view;\nctx.clearRect(0, 0, c.width, c.height);"},{"spec":{"top":-3576,"left":-1512,"width":469,"height":697},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Workshop\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":3},\"content\":[{\"type\":\"text\",\"text\":\"Interactions:\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"strong\"}],\"text\":\"Make new Card\"},{\"type\":\"text\",\"text\":\" : Right click on empty space, select “new” then left click and drag out the Card\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"strong\"}],\"text\":\"Assign Card Type\"},{\"type\":\"text\",\"text\":\": Right click on empty card, select “type”\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"strong\"}],\"text\":\"Remove Card\"},{\"type\":\"text\",\"text\":\": Right click on card, select “remove”\"}]},{\"type\":\"horizontal_rule\"},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"strong\"}],\"text\":\"Move Card\"},{\"type\":\"text\",\"text\":\": Right click and drag within the center of the Card\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"strong\"}],\"text\":\"Resize Card\"},{\"type\":\"text\",\"text\":\": Right click and drag Card from any corner or edge (8 options, N NE E SE S SW W NW)\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"strong\"}],\"text\":\"Clone Card\"},{\"type\":\"text\",\"text\":\": Duplicates card\"}]},{\"type\":\"horizontal_rule\"},{\"type\":\"heading\",\"attrs\":{\"level\":3},\"content\":[{\"type\":\"text\",\"text\":\"Card Types:\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"strong\"}],\"text\":\"codemirror\"},{\"type\":\"text\",\"text\":\": Code editor\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"strong\"}],\"text\":\"prosemirror\"},{\"type\":\"text\",\"text\":\": Rich Text Editor\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"strong\"}],\"text\":\"canvas\"},{\"type\":\"text\",\"text\":\": HTML canvas\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"strong\"}],\"text\":\"container:\"},{\"type\":\"text\",\"text\":\" fill with cards\"}]},{\"type\":\"horizontal_rule\"},{\"type\":\"heading\",\"attrs\":{\"level\":3},\"content\":[{\"type\":\"text\",\"text\":\"Selection:\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"strong\"}],\"text\":\"Execution\"},{\"type\":\"text\",\"text\":\": Click any code editor card to select it for execution\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"strong\"}],\"text\":\"Ctrl-Enter:\"},{\"type\":\"text\",\"text\":\" to execute the contents of the selected code editor\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"strong\"}],\"text\":\"Canvas\"},{\"type\":\"text\",\"text\":\": Click any canvas editor card to expose it’s context under the global variable `canvas.view`\"}]}]}"},{"spec":{"top":-3468,"left":-1032,"width":505,"height":241},"children":[],"node":null,"type":"codemirror","view":null,"content":"// library\nfunction line (x1, y1, x2, y2) {\n  ctx.beginPath();\n  ctx.moveTo(x1, y1);\n  ctx.lineTo(x2, y2);\n  ctx.stroke();\n}\n\nfunction point (x, y) {\n  ctx.fillRect(x, y, 1, 1);\n}\n\nfunction sand (x1, y1, x2, y2) {\n  \n}\n\n"},{"spec":{"top":-3216,"left":-1032,"width":505,"height":385},"children":[],"node":null,"type":"codemirror","view":null,"content":"let c = canvas.view.canvas;\nlet ctx = canvas.view;\n\nlet pts = triangle(100, 100, 200, 200);\n//drawTriangle(pts, (p1, p2) => line(p1.x, p1.y, p2.x, p2.y));\n\nfor (let x = 100; x < 600; x += 100) {\n  for (let y = 100; y < 600; y += 100) {\n    let pts = triangle(x, y, x + 50, y + 50);\n    drawTriangle(pts, (p1, p2) => line(p1.x, p1.y, p2.x, p2.y));\n  }\n}"},{"spec":{"top":-3576,"left":-516,"width":481,"height":481},"children":[],"node":null,"type":"canvas","view":null,"content":null},{"spec":{"top":-3084,"left":-516,"width":481,"height":433},"children":[],"node":null,"type":"codemirror","view":null,"content":"// bounding box\nfunction triangle(x1, y1, x2, y2) {\n  let size = 4;\n  let xrange = x2 - x1;\n  let yrange = y2 - y1;\n\n  let pts = [];\n\n  let xstep = xrange / size;\n  let ystep = yrange / size;\n\n  for (let x = x1 + xstep / 2; x < x2; x += xstep) {\n    for (let y = y1 + ystep / 2; y < y2; y += ystep) {\n      pts.push ({x, y});\n    }\n  }\n\n  let choices = new Set();\n  while (choices.size < 3) {\n    choices.add(Math.floor(Math.random() * pts.length));\n  }\n\n  let ret = [];\n  choices.forEach(c => ret.push(pts[c]))\n  return ret;\n}\n\nfunction drawTriangle(pts, line) {\n  let p1 = pts[0];\n  let p2 = pts[1];\n  let p3 = pts[2];\n\n  line(p1, p2);\n  line(p2, p3);\n  line(p3, p1);\n}"},{"spec":{"top":-2868,"left":-1512,"width":469,"height":265},"children":[],"node":null,"type":"codemirror","view":null,"content":"// testing transform\n\nselected.node.style.transform = 'scale(1)'\n\n//document.body.style.transform = 'scale(1)'"},{"spec":{"top":-2820,"left":-1032,"width":505,"height":229},"children":[],"node":null,"type":"container","view":null,"content":null},{"spec":{"top":-3576,"left":0,"width":445,"height":949},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Interactions\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Create cards and fill with editors or canvas. Looking to fill out more options.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"The process of making something like a button seems way too hard.\"}]},{\"type\":\"paragraph\"},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Making a new card type is much too hard\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"The code is too convoluted.\"}]},{\"type\":\"paragraph\"},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Is there an API to discover here?\"}]},{\"type\":\"paragraph\"},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Not even close to Eve demo or layers within the editors, that would depend on buttons?\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"ZUI?\"}]},{\"type\":\"paragraph\"},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"How about self hosting the code? Dependent on buttons? Or the container connection between tabs and content?\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Save on mouseclick can bite you.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Implement UNDO!\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Questions\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"What is “movement”? What should it feel like here? How to organize more content than can fit on the screen? \"}]}]}"},{"spec":{"top":-3576,"left":456,"width":445,"height":457},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Fed C2 Wiki?\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"If this column was like the fed wiki, what would opening a link look like? To the side? Back closing?\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"That’s pretty doable with containers.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"How to deal with scroll, pan, zui, tabs? What combination\"}]},{\"type\":\"paragraph\"},{\"type\":\"paragraph\"}]}"},{"spec":{"top":-2616,"left":912,"width":445,"height":25},"children":[],"node":null,"type":"empty","view":null,"content":null},{"spec":{"top":-3108,"left":456,"width":445,"height":481},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"ProseMirror\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"TOC?\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Would a TOC be implemented with the cards or within prosemirror?\"}]},{\"type\":\"paragraph\"}]}"},{"spec":{"top":-3576,"left":1368,"width":445,"height":949},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Goals\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":3},\"content\":[{\"type\":\"text\",\"text\":\"Selection or Containers: \"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Move as groups, clone as groups, explore alternatives. Tabs which sub out multiple pieces within a content or target area.\"}]},{\"type\":\"horizontal_rule\"},{\"type\":\"heading\",\"attrs\":{\"level\":3},\"content\":[{\"type\":\"text\",\"text\":\"iframe:\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"An ink&switch article next to my notes, next to some code explorations of small wms. Probably within a container. Are there multiple types of containers?\"}]},{\"type\":\"horizontal_rule\"},{\"type\":\"heading\",\"attrs\":{\"level\":3},\"content\":[{\"type\":\"text\",\"text\":\"API:\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Find the API, refactor the code. All application logic abstracted from browser interactions.\"}]},{\"type\":\"horizontal_rule\"},{\"type\":\"heading\",\"attrs\":{\"level\":3},\"content\":[{\"type\":\"text\",\"text\":\"Undo:\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"preserve the already existing and defined state. Utilize viewstate.\"}]},{\"type\":\"horizontal_rule\"},{\"type\":\"paragraph\"}]}"},{"spec":{"top":-3576,"left":912,"width":445,"height":949},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Impressions\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"It feels pretty good to be able to create, resize and move text editors. It feels especially good to be able to clone and place a duplicate editor for continuing a workflow or testing alternatives alongside the original in only a few clicks. Or expanding a column layout like this one.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"It feels good to be able to move to “recenter” my screen on the top left. \"},{\"type\":\"hard_break\"},{\"type\":\"text\",\"text\":\"It feels bad that it’s so slow, maybe. Seems like a zoom out, pan over, zoom back in could be nice. Or just a non direct manipulation pan, like with some multiplier.\"}]},{\"type\":\"paragraph\"}]}"},{"spec":{"top":-3576,"left":1836,"width":445,"height":1009},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Projects\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"What is possible here?\"}]},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":2},\"content\":[{\"type\":\"text\",\"text\":\"Direct Manipulation Direct Manipulation Configuration\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"All cards besides the special-cased container respond to right click in one of 10 ways. If it is a click (mouse down and mouse up in the same location, no movement) a context menu shows the current actions for the card. Assign an empty card or clone or remove a content card. \"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"The other nine options are movement and resizing. Eight directional resizes (N NE E SE S SW W NW) and the center is move. The card is split up into 9 distinct regions and the region of the event dictates the action of the mouse drag.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"The default region boundaries are set on “fourths,” that is, if the mouse is on the top fourth of the card it is in the N region and allows a one dimensional resize up and down, unless it is in the top fourth \"},{\"type\":\"text\",\"marks\":[{\"type\":\"em\"}],\"text\":\"and\"},{\"type\":\"text\",\"text\":\" the right fourth then it is in the NE corner and becomes a two dimensional resize on the top right corner and so on. If the event is in the middle half of the card it is a move rather than one of the eight resizes.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"This is an arbitrary choice, and one might prefer different bounds. At the moment these bounds are also invisible to the user but that isn’t necessarily the best idea and might change in the future. \"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Given this interaction setup, it’s easy to imagine a custom bounds-setting direct manipulation element. A component where the user might be able to drag the set of bounds around and in real time change the Direct Manipulation interactions with every card in the system. Such a control component would be impossible in any other system.\"}]},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"PDF container and pager\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Keyboard Controls\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Experiment^ Dashboards\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"What I Wish OneNote PDF Import Looked Like\"}]}]}"},{"spec":{"top":-3576,"left":2292,"width":445,"height":757},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"I plan to implement this as an interactive canvas with movable regions which parameterize each Card’s resize and movement.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"I don’t have any predefined card types for this experiment, it is meant to demonstrate how new features or interactions can be thought up and implemented on the fly within the system without prior setup.\"}]},{\"type\":\"paragraph\"}]}"},{"spec":{"top":-2808,"left":2292,"width":445,"height":229},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"once done, create a small card which live reports the current region. Like the last tabbed demo had onmousemove.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"hard_break\"},{\"type\":\"text\",\"text\":\"🠰 This visual piece^ is what I mean by Experiment Dashboards\"}]},{\"type\":\"paragraph\"}]}"},{"spec":{"top":-3576,"left":2748,"width":625,"height":565},"children":[],"node":null,"type":"codemirror","view":null,"content":"let c = canvas.view.canvas;\nlet ctx = canvas.view;\n\nfunction line (x1, y1, x2, y2) {\n  ctx.beginPath();\n  ctx.moveTo(x1 + 0.5, y1 + 0.5);\n  ctx.lineTo(x2 + 0.5, y2 + 0.5);\n  ctx.stroke();\n}\n\nlet controller = {};\ncontroller.left = 2 / 8;\ncontroller.top = 2 / 8;\ncontroller.right = 6 / 8;\ncontroller.bottom = 6 / 8;\n\nfunction displayController(controller) {\n  ctx.clearRect(0, 0, c.width, c.height);\n  ctx.fillStyle = '#eeeeee';\n  ctx.fillRect(0, 0, c.width, c.height);\n  line(controller.left * c.width, 0, controller.left * c.width, c.height);\n  line(controller.right * c.width, 0, controller.right * c.width, c.height);\n  line(0, controller.top * c.height, c.width, controller.top * c.height);\n  line(0, controller.bottom * c.height, c.width, controller.bottom * c.height);\n}\ndisplayController(controller)\n\nc.onmousedown = function(evt) {\n  let x = evt.offsetX;\n  let y = evt.offsetY;\n  let xtargets = [];\n  let ytargets = [];\n\n  if (near(x, controller.left * c.width)) xtargets.push('left')\n  if (near(x, controller.right * c.width)) xtargets.push('right')\n  if (near(y, controller.top * c.height)) ytargets.push('top')\n  if (near(y, controller.bottom * c.height)) ytargets.push('bottom')\n\n  c.onmousemove = function(evt) {\n    let card = getFirstCardFromEvent(evt);\n    c.width = parseInt(card.style.width);\n    c.height = parseInt(card.style.height);\n    //if (evt.button === 2) return //rmb\n    \n    xtargets.forEach (t => {\n      controller[t] = ((controller[t] * c.width) + evt.movementX) / c.width;\n    })\n    ytargets.forEach (t => {\n      controller[t]=+ ((controller[t] * c.height) + evt.movementY) / c.height;\n    })\n    displayController(controller);\n  }\n  c.onmouseup = function(evt) {\n    window.xsm = controller.left;\n    window.xlg = controller.right;\n    window.ysm = controller.top;\n    window.ylg = controller.bottom;\n    c.onmousemove = null;\n  }\n  \n  function near(value, target) {\n    return Math.abs(value - target) < 5;\n  }\n\n}"},{"spec":{"top":-2940,"left":3264,"width":445,"height":301},"children":[],"node":null,"type":"canvas","view":null,"content":null},{"spec":{"top":-2916,"left":3780,"width":397,"height":301},"children":[],"node":null,"type":"empty","view":null,"content":null},{"spec":{"top":-2952,"left":2796,"width":409,"height":361},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Interactions\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"On right click drag, cards have 9 handles. 8 Resize the card on their direction (N NE E SE S SW W NW) and the middle moves the card.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"The bounds for determining the regions are set on the fly by these guides.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"I’ll start by demonstrating minor resizes and moves, then redefine the region bounds and show that the new bounds correspond to other card’s capture points. The two empty cards are simply to demonstrate the lines lining up with the mouse.\"}]}]}"},{"spec":{"top":-2448,"left":0,"width":433,"height":289},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Digital\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Application Logic\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Browser, DOM, HTML\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Events\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Layer Based Design\"}]}]}"},{"spec":{"top":-2532,"left":444,"width":457,"height":757},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"What is the architecture of this system.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Can I learn something from other UI frameworks about how to create the right abstractions and refactor the code?\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Unify node and runtime? It really is in the runtime, maybe the runtime can keep some accessor methods?\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Sketchup “just works” there’s something about it that makes low fidelity prototyping faster than real pro tools.\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"ZUI\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Let’s say I try the zui. New ZUI cards all come with a parent button? What if the user removes it? Where is the default place for it? \"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Breadcrumbs at the top rather than a link bar? That could work…\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Okay let’s do that.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Prosemirror explorations about things like wiki style links?\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Upside to ZUI, I get to explore the idea of no-scroll. Middle ground would be custom minimal scroll bars. Punting would be keep a pan.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Mapping between devices with different screen sizes is going to be a massive problem.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"A conditional “place” function where if the coordinates are out of bounds it is “modulo” into place?\"}]},{\"type\":\"paragraph\"},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"ZUI card open -> fullscreen and close -> parent fullscreen\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"break that down? What about sub areas of screen can be filled or not? Tabs?\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"I really want to get excise and transclusion in here. Both within the editors and between the cards and containers.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Need copy paste. Drawer or another layer.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Undo Stack. Undo Tree.\"}]},{\"type\":\"paragraph\"}]}"},{"spec":{"top":-2532,"left":0,"width":433,"height":73},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Architecture\"}]}]}"},{"spec":{"top":-2448,"left":912,"width":457,"height":241},"children":[],"node":null,"type":"codemirror","view":null,"content":"card = {spec, \n        children,\n        node,\n        type,\n        content,\n        name\n       }\nspec = {top: Int, left: Int, width: Int, height: Int}\nchildren = []\nnode = `div`\ntype = 'string'\nview = EditorView\ncontent = 'string'\nname = 'string'\n"},{"spec":{"top":-2112,"left":912,"width":457,"height":253},"children":[],"node":null,"type":"codemirror","view":null,"content":"spec = {top: Int, left: Int, width: Int, height: Int}\nchildren = [<card>]\nparent = <card>\nnode = <div>\ntype = 'string'\nview = EditorView\ncontent = 'string'\nname = 'string'\ncard = {spec, \n        children,\n        parent,\n        node,\n        type,\n        content,\n        name\n       }"},{"spec":{"top":-2148,"left":0,"width":433,"height":373},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Problem\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\":movement and organization.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"ZUI? Links? Buttons or Tabs?\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"excise and transclusion?\"}]}]}"},{"spec":{"top":-2532,"left":912,"width":457,"height":73},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Current Interface\"}]}]}"},{"spec":{"top":-2196,"left":912,"width":457,"height":73},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Alternative Interface\"}]}]}"},{"spec":{"top":-1692,"left":912,"width":457,"height":49},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"}]}]}"},{"spec":{"top":-2532,"left":1380,"width":445,"height":517},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Features\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Selection, Grouping, Component building\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Implement Selection levels like infinite canvas tools? First click gets top, subsequent clicks drill down?\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Could totally have something like a drawer repl, or similarly a minimap or toc that is toggleable on a “separate layer” of the viewport. Analogous to a debug overlay. “Overlay”.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"If any selection is active it is movable.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"How the heck are cards going to be streamable webRTC style?\"}]},{\"type\":\"horizontal_rule\"},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Making a button which affects the viewport or as a ZUI is as simple as:\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"putButton(card, container);\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"and executing that puts the card into the container.\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Current Features\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"A pannable canvas grid on which the user can make Cards, and move, resize or remove existing Cards. \"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Cards which the user can assign the predefined types of editors, canvases, nested workspaces and consoles. Cards are cloneable.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"A global selection state where the last card left-clicked is remembered for a few features. Selected code editors are executable with ctrl-enter. Selected canvases are available under the global variable ‘window.canvas’. Any card clicked is remembered as ‘window.target’.\"}]}]}"},{"spec":{"top":-1848,"left":912,"width":457,"height":145},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Storage and Building: \"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"spec, type, content, name, children\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Runtime or Built or can’t-be-stored:\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"node, view\"}]}]}"},{"spec":{"top":-2004,"left":1380,"width":445,"height":529},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Abstractions\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"All actions should take place through the Card interface?\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Then I could make a button which ties into the same functionality as rclick -> new -> left drag. Substituting rclick -> new, going directly to the left drag state.\"}]},{\"type\":\"paragraph\"},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Passive features use addEventListener and stored in a registry.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Active features or equivalently active state all via ‘element.onevent’ handlers to be removed onmouseup\"}]},{\"type\":\"paragraph\"},{\"type\":\"paragraph\"}]}"},{"spec":{"top":-1764,"left":0,"width":385,"height":265},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Sample Boot\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Boot is two cards.\"}]},{\"type\":\"ordered_list\",\"attrs\":{\"order\":1},\"content\":[{\"type\":\"list_item\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Top Bar\"}]}]},{\"type\":\"list_item\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Rest of Screen\"}]}]}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"The rest of the screen is simply a container connected to the top bar.\"}]}]}"},{"spec":{"top":-1764,"left":396,"width":385,"height":25},"children":[],"node":null,"type":"empty","view":null,"content":null},{"spec":{"top":-2388,"left":2232,"width":685,"height":73},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"PDF Viewer\"}]}]}"},{"spec":{"top":-2388,"left":2928,"width":505,"height":421},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Sketchpad\"}]},{\"type\":\"paragraph\"},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Another way to handle the bookmarking feature would be to follow the work of OrgNoter. OrgNoter and many other modern content + notes applications make connections between writing (such as the user typing or handwriting) and the current viewport of the media (such as the PDF). So any writing can be selected and the viewport of the PDF, in this case, would jump to the page being read when that note was written.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"In a typing based note application this could be done in a multitude of ways. One might be the hooks into execution provided by applications like Slack or Dropbox Paper which hook into characters on the keyboard such as “/”, “@”, or “+” (slash, at, or plus). In this case something like “+Bookmark” could be written to attach connection to the text node’s parent element (in prosemirror that could be a paragraph block or heading among other options).\"}]},{\"type\":\"paragraph\"}]}"},{"spec":{"top":-1728,"left":2232,"width":145,"height":49},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Back Page\"}]}]}"},{"spec":{"top":-1476,"left":396,"width":385,"height":229},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Home > Project > P1\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Home > Project > P2\"}]},{\"type\":\"paragraph\"}]}"},{"spec":{"top":-1728,"left":2772,"width":145,"height":49},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Forward Page\"}]}]}"},{"spec":{"top":-1728,"left":2508,"width":145,"height":49},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Bookmark Page\"}]}]}"},{"spec":{"top":-2292,"left":2076,"width":145,"height":61},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Bookmark 1:\"},{\"type\":\"hard_break\"},{\"type\":\"text\",\"text\":\"Structure\"}]}]}"},{"spec":{"top":-2388,"left":3444,"width":517,"height":673},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Thoughts on OneNote\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"OneNote is great for editing a page of notes, where it falls apart is if you have any more content than can fit on one page.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Importing and marking up PDFs highlights OneNote’s issues in this domain. If you import a multi-page PDF it attaches to the OneNote document a stack of separated pages of the PDF. OneNote offers no features to jump between those pages so notes on the margins end up spread apart over a significant distance which is only navigable by scrolling. \"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"OneNote advertises full text search as the solution to this “search” problem, but I have never succeeded after many attempts to get it to search my PDFs.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Aside from the poor usability problems during the reading, these issues with OneNote make returning to an already read and noted document, such as for a class discussion, a nightmare.\"}]},{\"type\":\"paragraph\"},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"So this shows what I wish OneNote’s PDFs viewer looked and acted like. I want the PDF to be embedded in a container within the greater canvas, so that my notes and class discussion could be could be next to each other and the document, and that I would have actual movement controls on the PDF such as paging and bookmarks.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Really all that is required is embedding any real PDF viewer within OneNote and retaining the inking capabilities that make OneNote desirable to work with in the first place.\"}]},{\"type\":\"paragraph\"},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"This PDF problem is representative of the more general problem that content beyond one page has \"},{\"type\":\"text\",\"marks\":[{\"type\":\"em\"}],\"text\":\"no\"},{\"type\":\"text\",\"text\":\" organizational features aside from direct manipulation pan and zoom. There’s no way to get to content outside of a page than to drag your way there.\"}]}]}"},{"spec":{"top":-2304,"left":2232,"width":553,"height":565},"children":[],"node":null,"type":"empty","view":null,"content":null},{"spec":{"top":-2220,"left":2076,"width":145,"height":61},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Bookmark 2:\"},{\"type\":\"hard_break\"},{\"type\":\"text\",\"text\":\"Bridge Drawing\"}]}]}"},{"spec":{"top":-2304,"left":2232,"width":685,"height":565},"children":[],"node":null,"type":"empty","view":null,"content":null},{"spec":{"top":-1956,"left":2928,"width":505,"height":313},"children":[],"node":null,"type":"codemirror","view":null,"content":"let card = Object.assign({}, target); //shallow copy selection once\n\nlet object = document.createElement('object');\nobject.type = 'application/pdf';\nobject.data = 'http://worrydream.com/refs/Sutherland-Sketchpad.pdf';\n\nobject.width = parseInt(card.node.style.width);\nobject.height = parseInt(card.node.style.height);\nconsole.log(object)\n\ncard.node.appendChild(object)\n"},{"spec":{"top":-1632,"left":2928,"width":505,"height":205},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Meta Note\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"This screenshot was made in my prototype interface builder environment. It allows building this dashed-line cards and setting their contents to a couple of presets, a writing editor and a coding editor, as well as executing that code to enable more contents. The API is still in the works, but the above code box and a left mouse click are all that was required to embed the PDF in my “demo” PDF viewer.\"}]}]}"},{"spec":{"top":-1608,"left":2340,"width":433,"height":97},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Towards actually implementing this, PDF.JS is the actual bees knees.\"}]},{\"type\":\"paragraph\"}]}"},{"spec":{"top":-1392,"left":1824,"width":361,"height":253},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"ZUI Link\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"https://github.com/Webstrates/tutorials/blob/master/pad/README.md\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"nope, could fetch the file though.\"}]},{\"type\":\"paragraph\"}]}"},{"spec":{"top":-1392,"left":2196,"width":661,"height":409},"children":[],"node":null,"type":"codemirror","view":null,"content":"let card = Object.assign({}, target); //shallow copy selection once\n\nlet innerDiv = document.createElement('div');\n\ninnerDiv.style.paddingTop = '12px'\ninnerDiv.style.paddingLeft = '12px'\ninnerDiv.style.width = parseInt(card.node.style.width) - 24;\ninnerDiv.style.height = parseInt(card.node.style.height) - 24;\n\ncard.node.appendChild(innerDiv)"},{"spec":{"top":-972,"left":2196,"width":661,"height":409},"children":[],"node":null,"type":"codemirror","view":null,"content":"let card = Object.assign({}, target); //shallow copy selection once\n\nlet iframe = document.createElement('iframe');\niframe.src = 'https://wiki.c2.com/?ApplicationProgrammingInterface';\n\niframe.width = parseInt(card.node.style.width) - 24;\niframe.height = parseInt(card.node.style.height) - 24;\n\ncard.node.appendChild(iframe)"},{"spec":{"top":-1272,"left":2964,"width":517,"height":541},"children":[],"node":null,"type":"empty","view":null,"content":null},{"spec":{"top":-1560,"left":5472,"width":241,"height":205},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"I wish I could zoom.\"},{\"type\":\"hard_break\"},{\"type\":\"hard_break\"},{\"type\":\"hard_break\"}]}]}"},{"spec":{"top":-1368,"left":4476,"width":541,"height":385},"children":[],"node":null,"type":"codemirror","view":null,"content":"let card = Object.assign({}, target); //shallow copy selection once\n\ncard.node.style.transform = 'scale(2)'\n\n// testing transform\n\n"},{"spec":{"top":-1788,"left":4476,"width":541,"height":409},"children":[],"node":null,"type":"codemirror","view":null,"content":"let card = Object.assign({}, target); //shallow copy selection once\n\ncard.node.style.transform = 'scale(1)'\n\n// testing transform\n\n"},{"spec":{"top":-1764,"left":396,"width":97,"height":25},"children":[],"node":null,"type":"empty","view":null,"content":null},{"spec":{"top":-1764,"left":492,"width":85,"height":25},"children":[],"node":null,"type":"empty","view":null,"content":null},{"spec":{"top":-1740,"left":396,"width":385,"height":241},"children":[],"node":null,"type":"empty","view":null,"content":null},{"spec":{"top":-1704,"left":420,"width":157,"height":157},"children":[],"node":null,"type":"empty","view":null,"content":null},{"spec":{"top":-2148,"left":2076,"width":145,"height":49},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"New Bookmark\"}]}]}"},{"spec":{"top":-1776,"left":5472,"width":145,"height":49},"children":[],"node":null,"type":"codemirror","view":null,"content":"target.node.style.transform = 'scale(2)'"},{"spec":{"top":-1776,"left":5316,"width":145,"height":49},"children":[],"node":null,"type":"codemirror","view":null,"content":"target.node.style.transform = 'scale(1)'"},{"spec":{"top":-1500,"left":5832,"width":145,"height":73},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Label\"}]}]}"},{"spec":{"top":-1860,"left":5472,"width":145,"height":73},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Zoom 2\"}]}]}"},{"spec":{"top":-1860,"left":5316,"width":145,"height":73},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Zoom 1\"}]}]}"},{"spec":{"top":-1776,"left":5628,"width":157,"height":49},"children":[],"node":null,"type":"codemirror","view":null,"content":"target.node.style.transform = 'rotate(0)'"},{"spec":{"top":-1776,"left":5796,"width":181,"height":49},"children":[],"node":null,"type":"codemirror","view":null,"content":"target.node.style.transform = 'rotate(-90deg)'"},{"spec":{"top":-1860,"left":5628,"width":157,"height":73},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Rotate 0\"}]}]}"},{"spec":{"top":-1860,"left":5796,"width":181,"height":73},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Rotate 90\"}]}]}"},{"spec":{"top":-1068,"left":12,"width":433,"height":73},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Architecture v2\"}]}]}"},{"spec":{"top":-1068,"left":1416,"width":457,"height":277},"children":[],"node":null,"type":"codemirror","view":null,"content":"spec = {top: Int, left: Int, width: Int, height: Int}\nchildren = [<card>]\nparent = <card>\nnode = <div>\ntype = 'string'\nview = EditorView\ncontent = 'string'\nname = 'string'\n\ncard = {spec, \n        children,\n        parent,\n        node,\n        type,\n        content,\n        name,\n       }"},{"spec":{"top":-960,"left":12,"width":457,"height":697},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Tasks\"}]},{\"type\":\"ordered_list\",\"attrs\":{\"order\":1},\"content\":[{\"type\":\"list_item\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Container Implementation\"}]}]},{\"type\":\"list_item\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Button Implementation\"}]}]},{\"type\":\"list_item\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Refactor\"}]}]},{\"type\":\"list_item\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Stopify Babel Ocelot transform\"}]}]},{\"type\":\"list_item\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Stopify controls\"}]}]},{\"type\":\"list_item\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Publish with Instructions\"}]}]},{\"type\":\"list_item\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Undo\"}]}]},{\"type\":\"list_item\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Self-Host\"}]}]},{\"type\":\"list_item\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"WebRTC Stream/Share cards\"}]}]}]},{\"type\":\"paragraph\"},{\"type\":\"horizontal_rule\"},{\"type\":\"bullet_list\",\"content\":[{\"type\":\"list_item\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"z-index with selection\"}]}]},{\"type\":\"list_item\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"writeup\"}]}]},{\"type\":\"list_item\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"reading\"}]}]}]}]}"},{"spec":{"top":-1068,"left":480,"width":457,"height":73},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Items\"}]}]}"},{"spec":{"top":-984,"left":480,"width":457,"height":385},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Container\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"A card with two parts, a constant control area and a dynamic content area.\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":2},\"content\":[{\"type\":\"text\",\"text\":\"Feature Set\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":3},\"content\":[{\"type\":\"text\",\"text\":\"Column Editors\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Like these columns, something like auto fill and encapsulation. Federated wiki style columns.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"i3 stack and tab\"}]}]}"},{"spec":{"top":-1068,"left":948,"width":457,"height":73},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Ideas\"}]}]}"},{"spec":{"top":-984,"left":948,"width":457,"height":133},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Sketchpad Viewport\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Custom viewport\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Save viewport locations as “links”\"}]}]}"},{"spec":{"top":-840,"left":948,"width":457,"height":241},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Input Methods\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Equivalent control between mouse, keyboard, command and touch. Command means a repl and/or slash-commands in prosemirror.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"This is going to require modes and visual effects or monitors.\"}]},{\"type\":\"bullet_list\",\"content\":[{\"type\":\"list_item\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"repl\"}]}]},{\"type\":\"list_item\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"slash-commands in prosemirror\"}]}]}]}]}"},{"spec":{"top":-588,"left":948,"width":457,"height":421},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"ProseMirror\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"slash-commands, active word editor prefixes like ‘#’, ‘@’, ‘!’, ‘$’, ‘/’, etc. Any and all could have meaning.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Toggle: Editor node grows or is fixed with scroll.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Outline view based on headers. Attachable, drawer-able, key-toggle-able. This is beginning to become emacs in the browser.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Table editor?\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Headers could be collapsible\"}]}]}"},{"spec":{"top":-228,"left":12,"width":457,"height":217},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"API v2\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"link\",\"attrs\":{\"href\":\"https://wiki.c2.com/?ApplicationProgrammingInterface\",\"title\":null}}],\"text\":\"https://wiki.c2.com/?ApplicationProgrammingInterface\"}]},{\"type\":\"paragraph\"}]}"},{"spec":{"top":-252,"left":12,"width":457,"height":13},"children":[],"node":null,"type":"canvas","view":null,"content":null},{"spec":{"top":12,"left":480,"width":457,"height":1057},"children":[],"node":null,"type":"codemirror","view":null,"content":"//card\n\nmakeCard\nstyleCard"},{"spec":{"top":-156,"left":948,"width":457,"height":145},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Bel Reader\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Chris Granger Eve Document/Editor.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Connected panes of a document.\"}]}]}"},{"spec":{"top":-456,"left":1416,"width":457,"height":145},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"HyperText\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Excise, Transclude.\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Bi-directional links.\"}]}]}"},{"spec":{"top":-984,"left":12,"width":457,"height":13},"children":[],"node":null,"type":"canvas","view":null,"content":null},{"spec":{"top":-1068,"left":456,"width":13,"height":85},"children":[],"node":null,"type":"canvas","view":null,"content":null},{"spec":{"top":12,"left":948,"width":457,"height":1057},"children":[],"node":null,"type":"codemirror","view":null,"content":"//card\n\nmakeCard\nstyleCard\nviewCard\nsaveCard\nnewCard\ngetCardRuntime\ngetFirstCardFromEvent\nactivateCard\n\n////////////////////////////////////////////////////////////\n//target\n\ngetCardRuntime\ngetFirstCardFromEvent\ngetAllChildren\ngetFirstChild\nspecToState\ngetSpecFromNode\n\n////////////////////////////////////////////////////////////\n//component\n\nputComponent\nputCodeMirror\nputProseMirror\nputCanvas\nputConsole\nputContainer\nsetComponentContent\n\n////////////////////////////////////////////////////////////\n//state\n\nstate\nviewState\nsaveState\n\n////////////////////////////////////////////////////////////\n//interactions\n\nonmouseup\nonmousemove\nconstrainedMoveAll\nconstrainedManipulation\nclickRegion\naddContextMenu\nbuildButtons\n\n////////////////////////////////////////////////////////////\n//boot\n\nonload\nonkeydown\nrun\nwindow.state\n"},{"spec":{"top":12,"left":12,"width":457,"height":1057},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"API v2\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Rewrite\"}]},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":3},\"content\":[{\"type\":\"text\",\"text\":\"Runtime\"}]},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":3},\"content\":[{\"type\":\"text\",\"text\":\"DOM\"}]},{\"type\":\"paragraph\"},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":3},\"content\":[{\"type\":\"text\",\"text\":\"Runtime <-> DOM\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"get card from click\"}]},{\"type\":\"paragraph\"},{\"type\":\"horizontal_rule\"},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"There is a general idea of \"},{\"type\":\"text\",\"marks\":[{\"type\":\"strong\"}],\"text\":\"Selection\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Clicking, invoking, switching\"}]},{\"type\":\"paragraph\"},{\"type\":\"horizontal_rule\"},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Card prototyping. Class methoding. Getters and Setters\"}]},{\"type\":\"horizontal_rule\"},{\"type\":\"heading\",\"attrs\":{\"level\":3},\"content\":[{\"type\":\"text\",\"text\":\"Life Cycle of a Card\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"makeCard -> empty Card\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"empty Card assigned type -> Content Card\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Card can be:\"}]},{\"type\":\"bullet_list\",\"content\":[{\"type\":\"list_item\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"removed, cloned,\"},{\"type\":\"hard_break\"},{\"type\":\"text\",\"text\":\"moved, resized,\"},{\"type\":\"hard_break\"},{\"type\":\"text\",\"text\":\"assigned, unassigned?,\"},{\"type\":\"hard_break\"},{\"type\":\"text\",\"text\":\"have a move toggle set?\"}]}]}]},{\"type\":\"paragraph\"},{\"type\":\"horizontal_rule\"},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"How to move towards a self-hosted code base?\"}]},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Design Challenges\"}]},{\"type\":\"bullet_list\",\"content\":[{\"type\":\"list_item\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Multiple kinds of selection, how to determine which selection type is intended?\"}]}]}]},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":2},\"content\":[{\"type\":\"text\",\"text\":\"What Does the Code Interface Look Like?\"}]},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":2},\"content\":[{\"type\":\"text\",\"text\":\"What is the Feature Set?\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"On a canvas,\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Make Cards\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Put content in cards\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Manipulate existing cards\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"execute code\"}]},{\"type\":\"paragraph\"},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"This is all mouse driven as figma; it needs to also be keyboard driven as vim, repl driven as emacs, in-place command driven as Dropbox Paper. \"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"This all needs to be clearly demonstrated and changable.\"}]},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":1}},{\"type\":\"heading\",\"attrs\":{\"level\":2},\"content\":[{\"type\":\"text\",\"text\":\"What is the Coding Interface?\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Want to be able to talk about individual cards, all cards, recursively all children cards. What else?\"}]},{\"type\":\"paragraph\"},{\"type\":\"paragraph\"},{\"type\":\"paragraph\"},{\"type\":\"paragraph\"},{\"type\":\"paragraph\"},{\"type\":\"paragraph\"},{\"type\":\"paragraph\"},{\"type\":\"paragraph\"},{\"type\":\"paragraph\"},{\"type\":\"paragraph\"},{\"type\":\"paragraph\"},{\"type\":\"paragraph\"},{\"type\":\"paragraph\"},{\"type\":\"paragraph\"},{\"type\":\"paragraph\"},{\"type\":\"paragraph\"},{\"type\":\"paragraph\"},{\"type\":\"paragraph\"},{\"type\":\"paragraph\"},{\"type\":\"paragraph\"},{\"type\":\"paragraph\"},{\"type\":\"paragraph\"}]}"},{"spec":{"top":12,"left":2040,"width":457,"height":169},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"pm\"}]},{\"type\":\"paragraph\"}]}"},{"spec":{"top":192,"left":2040,"width":493,"height":157},"children":[],"node":null,"type":"codemirror","view":null,"content":"let card = Object.assign({}, target); //shallow copy selection once\n\nlet iframe = document.createElement('iframe');\niframe.src = 'https://wiki.c2.com/?ApplicationProgrammingInterface';\n\niframe.width = parseInt(card.node.style.width);\niframe.height = parseInt(card.node.style.height);\n\ncard.node.appendChild(iframe)"},{"spec":{"top":-588,"left":1416,"width":457,"height":121},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Mathematica\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Right side cell annotation in ProseMirror and maybe even CodeMirror??\"}]}]}"},{"spec":{"top":96,"left":1416,"width":457,"height":301},"children":[],"node":null,"type":"codemirror","view":null,"content":"spec = {top: Int, left: Int, width: Int, height: Int}\nchildren = [<card>]\nparent = <card>\nnode = <div>\ntype = 'string'\nview = EditorView\ncontent = 'string'\nname = 'string'\n\ncard = {spec, \n        children,\n        parent,\n        node,\n        type,\n        content,\n        name,\n       }"},{"spec":{"top":12,"left":1416,"width":457,"height":73},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Property Interface\"}]}]}"},{"spec":{"top":408,"left":1416,"width":457,"height":73},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Prototype Interface\"}]}]}"},{"spec":{"top":492,"left":1416,"width":457,"height":301},"children":[],"node":null,"type":"codemirror","view":null,"content":"card.getChildren\ncard.getParent\n\n"},{"spec":{"top":1176,"left":12,"width":1297,"height":73},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Table of Concerns\"}]}]}"},{"spec":{"top":1332,"left":336,"width":85,"height":61},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":2},\"content\":[{\"type\":\"text\",\"text\":\"Boot\"}]}]}"},{"spec":{"top":1332,"left":432,"width":85,"height":61},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":2},\"content\":[{\"type\":\"text\",\"text\":\"Meta\"}]}]}"},{"spec":{"top":1332,"left":528,"width":109,"height":61},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":2},\"content\":[{\"type\":\"text\",\"text\":\"Library\"}]}]}"},{"spec":{"top":1332,"left":648,"width":121,"height":61},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":2},\"content\":[{\"type\":\"text\",\"text\":\"Browser\"}]}]}"},{"spec":{"top":1332,"left":780,"width":145,"height":61},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":2},\"content\":[{\"type\":\"text\",\"text\":\"Inspector\"}]}]}"},{"spec":{"top":1332,"left":1080,"width":157,"height":61},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":2},\"content\":[{\"type\":\"text\",\"text\":\"Workspace\"}]}]}"},{"spec":{"top":1332,"left":1248,"width":181,"height":61},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":2},\"content\":[{\"type\":\"text\",\"text\":\"Composition\"}]}]}"},{"spec":{"top":1440,"left":12,"width":673,"height":769},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":2},\"content\":[{\"type\":\"text\",\"text\":\"Boot\"}]},{\"type\":\"horizontal_rule\"},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Where code needed to Boot the application lives. On load this code is run.\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":2},\"content\":[{\"type\":\"text\",\"text\":\"Meta\"}]},{\"type\":\"horizontal_rule\"},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"A second level of boot, where user custom code goes. Run after boot.\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":2},\"content\":[{\"type\":\"text\",\"text\":\"Library\"}]},{\"type\":\"horizontal_rule\"},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"A set of code definitions made avaiable in the library namespace.\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":2},\"content\":[{\"type\":\"text\",\"text\":\"Browser\"}]},{\"type\":\"horizontal_rule\"},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"A set of Cards made available in the system.\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":2},\"content\":[{\"type\":\"text\",\"text\":\"Inspector\"}]},{\"type\":\"horizontal_rule\"},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Selected Cards appear here for inspection and modification of all variables and attributes.\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":2},\"content\":[{\"type\":\"text\",\"text\":\"Viewport\"}]},{\"type\":\"horizontal_rule\"},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Edit the viewport layer\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":2},\"content\":[{\"type\":\"text\",\"text\":\"Workspace\"}]},{\"type\":\"horizontal_rule\"},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"The user’s entry point to the application.\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":2},\"content\":[{\"type\":\"text\",\"text\":\"Composition\"}]},{\"type\":\"horizontal_rule\"},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"A second workspace tab, set apart for finished work.\"}]}]}"},{"spec":{"top":1308,"left":312,"width":1129,"height":13},"children":[],"node":null,"type":"canvas","view":null,"content":null},{"spec":{"top":1404,"left":312,"width":1129,"height":13},"children":[],"node":null,"type":"canvas","view":null,"content":null},{"spec":{"top":1308,"left":312,"width":13,"height":109},"children":[],"node":null,"type":"canvas","view":null,"content":null},{"spec":{"top":1308,"left":1440,"width":13,"height":109},"children":[],"node":null,"type":"canvas","view":null,"content":null},{"spec":{"top":-588,"left":480,"width":457,"height":577},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Buttons and Modes?\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Minimap\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":1},\"content\":[{\"type\":\"text\",\"text\":\"Undo\"}]}]}"},{"spec":{"top":1332,"left":936,"width":133,"height":61},"children":[],"node":null,"type":"prosemirror","view":null,"content":"{\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":2},\"content\":[{\"type\":\"text\",\"text\":\"Viewport\"}]}]}"}],"node":null,"type":"container","view":null,"content":null,"name":"boot"}]
